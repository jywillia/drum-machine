{"version":3,"sources":["components/Display.js","components/Banks.js","redux/actions.js","redux/actionTypes.js","components/PowerSwitch.js","components/Volume.js","components/DrumPad.js","components/DrumPadRow.js","components/DrumPadArray.js","components/DrumMachine.js","DMApp.js","redux/reducers/initialDrums.js","redux/reducers/dmReducer.js","index.js"],"names":["Display","id","this","props","display","React","Component","connect","state","Object","assign","Banks","bankHandler","bind","toggleBank","banks","className","type","defaultValue","onChange","dispatch","currentBank","PowerSwitch","powerHandler","togglePower","power","defaultChecked","currentPower","Volume","changeHandler","event","adjustVolume","audioElement","document","getElementsByTagName","i","length","volume","target","value","Math","round","name","min","max","step","DrumPad","clickHandler","onClickHandler","hit","key","active","onClick","src","process","DrumPadRow","myDrums","map","DrumPadArray","playDrumPad","keyPressHandler","qPad","getElementById","drums","wPad","ePad","aPad","sPad","dPad","zPad","xPad","cPad","toggleActive","playDrumSound","load","play","setTimeout","addEventListener","splitDrums","slice","someDrums","index","text","activeButton","currentValue","DrumMachine","DMApp","initialDrums","initialState","store","createStore","action","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.65d40b6e.chunk.js","sourcesContent":["// import react dependency\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// import css style rules\r\nimport '../App.scss';\r\n\r\n// app's presentational component\r\nclass Display extends React.Component {\r\n    /* useless constructor\r\n    constructor( props ) {\r\n        super( props );           \r\n    }    */\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"display\">\r\n                <p>{this.props.display}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// export component as default with connected state - can rename component when imported\r\nexport default connect( mapStateToProps, null )(Display)","// import react dependency\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// import action creators for mapDispatchToProps\r\nimport { toggleBank } from '../redux/actions';\r\n\r\n// import action types for conditional rendering\r\n// import { PREVIEWER_VIEW } from '../redux/actionTypes';\r\n\r\n// import css style rules\r\nimport '../App.scss';\r\n\r\n// component to toggle drum kits\r\nclass Banks extends React.Component {\r\n    constructor( props ) {\r\n        super( props );        \r\n\r\n        // bind this to function\r\n        this.bankHandler = this.bankHandler.bind( this );\r\n    }\r\n\r\n    // change handler for when user wants to change drum kits\r\n    bankHandler() {\r\n        this.props.toggleBank( this.props.banks );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"banks\">\r\n                <p id=\"banks-label\">Banks: {this.props.banks}</p>\r\n                <label className=\"switch\" id=\"bank-switch\">\r\n                    <input type=\"checkbox\" defaultValue=\"0\" onChange={this.bankHandler}></input>\r\n                    <span className=\"slider round\" id=\"bank-slider\"></span>\r\n                </label>\r\n            </div>\r\n        );        \r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// connect dispatch to appropriate listener\r\nconst mapDispatchToProps = dispatch => {\r\n    return {        \r\n        toggleBank: ( currentBank ) => dispatch( toggleBank( currentBank ) )\r\n    }\r\n}\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, mapDispatchToProps )(Banks)","// import action type constants\r\nimport { DRUM_HIT, ADJUST_VOLUME, TOGGLE_BANK, TOGGLE_POWER, TOGGLE_ACTIVE } from \"./actionTypes.js\";\r\n\r\n// play drum pad sound\r\nexport const playDrumSound = ( name ) => ({\r\n    type: DRUM_HIT,\r\n    name    \r\n})\r\n\r\n// user adjusted the drum machine's volume\r\nexport const adjustVolume = ( event ) => ({\r\n    type: ADJUST_VOLUME,\r\n    volume: event.target.value\r\n})\r\n\r\n// user changed drum kit bank\r\nexport const toggleBank = ( currentBank ) => ({\r\n    type: TOGGLE_BANK,\r\n    banks: currentBank ? 0 : 1\r\n})\r\n\r\n// user toggled the power switch\r\nexport const togglePower = ( currentPower ) => ({\r\n    type: TOGGLE_POWER,\r\n    power: currentPower ? 0 : 1\r\n})\r\n\r\n// user activated button to show keypress and clicking drumpads\r\nexport const toggleActive = ( currentActive, currentValue ) => ({\r\n    type: TOGGLE_ACTIVE,\r\n    active: currentActive === null ? currentValue : null\r\n})","// export action types for use with action creators ect.\r\nexport const DRUM_HIT = \"DRUM_HIT\";  // user wants to play a drum sound\r\nexport const ADJUST_VOLUME = \"ADJUST_VOLUME\";  // adjust the volume for the drum machine\r\nexport const TOGGLE_BANK = \"TOGGLE_BANK\";  // change drum kit for different sounds\r\nexport const TOGGLE_POWER = \"TOGGLE_POWER\";  // toggle power switch on/off\r\nexport const TOGGLE_ACTIVE = \"TOGGLE_ACTIVE\"; // toggle between currently pressed/clicked key and null for button animations","// import react dependency\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// import action creators for mapDispatchToProps\r\nimport { togglePower } from '../redux/actions';\r\n\r\n// import action types for conditional rendering\r\n// import { PREVIEWER_VIEW } from '../redux/actionTypes';\r\n\r\n// import css style rules\r\nimport '../App.scss';\r\n\r\n// app's presentational component\r\nclass PowerSwitch extends React.Component {\r\n    constructor( props ) {\r\n        super( props );       \r\n\r\n        // bind this to function\r\n        this.powerHandler = this.powerHandler.bind( this );\r\n        // this.expandPreviewer = this.expandPreviewer.bind( this );\r\n        // this.defaultPreviewer = this.defaultPreviewer.bind( this );\r\n    }    \r\n\r\n    // change handler for when user toggles power switch\r\n    powerHandler() {\r\n        this.props.togglePower( this.props.power );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"power-switch\">\r\n                <p id=\"power-switch-label\">Power: {this.props.power ? \"On\" : \"Off\"}</p>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" defaultChecked onChange={this.powerHandler}></input>\r\n                    <span className=\"slider round\"></span>\r\n                </label>\r\n            </div>\r\n        );       \r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// connect dispatch to appropriate listener\r\nconst mapDispatchToProps = dispatch => {\r\n    return {        \r\n        togglePower: ( currentPower ) => dispatch( togglePower( currentPower ) )\r\n    }\r\n}\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, mapDispatchToProps )(PowerSwitch)","// import react dependency\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// import action creators for mapDispatchToProps\r\nimport { adjustVolume } from '../redux/actions';\r\n\r\n// import action types for conditional rendering\r\n// import { PREVIEWER_VIEW } from '../redux/actionTypes';\r\n\r\n// import css style rules\r\nimport '../App.scss';\r\n\r\n// app's presentational component\r\nclass Volume extends React.Component {\r\n    constructor( props ) {\r\n        super( props );        \r\n\r\n        // bind this to function\r\n        this.changeHandler = this.changeHandler.bind( this );\r\n        // this.expandPreviewer = this.expandPreviewer.bind( this );\r\n        // this.defaultPreviewer = this.defaultPreviewer.bind( this );\r\n    }    \r\n\r\n    // onChange handler to set the volume for the drum machine\r\n    changeHandler( event ) {\r\n        this.props.adjustVolume( event );\r\n        const audioElement = document.getElementsByTagName('audio');\r\n        for ( let i = 0; i < audioElement.length; i++ ) {\r\n            audioElement[i].volume = event.target.value;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"volume\">                \r\n                <label className=\"volume-label\">Volume: {Math.round(this.props.volume * 100)}</label>\r\n                <input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"1\" step=\"0.01\" defaultValue=\"1\" onChange={this.changeHandler}></input>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// connect dispatch to appropriate listener\r\nconst mapDispatchToProps = dispatch => {\r\n    return {        \r\n        adjustVolume: ( event ) => dispatch( adjustVolume( event ) )\r\n    }\r\n}\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, mapDispatchToProps )(Volume)","// import react dependency\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// import action creators for mapDispatchToProps\r\n// import { playDrumSound } from '../redux/actions';\r\n\r\n// import action types for conditional rendering\r\n// import { PREVIEWER_VIEW } from '../redux/actionTypes';\r\n\r\n// import css style rules\r\nimport '../App.scss';\r\n\r\n// app's presentational component\r\nclass DrumPad extends React.Component {\r\n    constructor( props ) {\r\n        super( props );\r\n\r\n        // bind this to function     \r\n        this.clickHandler = this.clickHandler.bind( this );        \r\n    }\r\n    \r\n    // onClick listener handles when user clicks drum pad\r\n    clickHandler() {\r\n        this.props.onClickHandler( this.props.hit.key );\r\n    }        \r\n\r\n    render() {\r\n        if ( this.props.active === this.props.hit.key ) {\r\n            return(\r\n                <div className=\"drum-pad is-active\" id={this.props.hit.name} onClick={this.clickHandler}>\r\n                {/* <div className=\"drum-pad btn btn-primary btn-sm rounded-0 col-sm-3\" id={this.props.hit.name} onClick={this.clickHandler}> */}\r\n                    <audio className=\"clip\" src={process.env.PUBLIC_URL + \"/sounds/\" + this.props.hit.name + \".mp3\"} type=\"audio/mpeg\" id={this.props.hit.key}>\r\n                        Your browser does not support the <code>audio</code> element.\r\n                    </audio>\r\n                    <p id=\"inner-text\">{this.props.hit.key}</p>\r\n                </div>\r\n            );            \r\n        } else {\r\n            return(\r\n                <div className=\"drum-pad\" id={this.props.hit.name} onClick={this.clickHandler}>\r\n                {/* <div className=\"drum-pad btn btn-primary btn-sm rounded-0 col-sm-3\" id={this.props.hit.name} onClick={this.clickHandler}> */}\r\n                    <audio className=\"clip\" src={process.env.PUBLIC_URL + \"/sounds/\" + this.props.hit.name + \".mp3\"} type=\"audio/mpeg\" id={this.props.hit.key}>\r\n                        Your browser does not support the <code>audio</code> element.\r\n                    </audio>\r\n                    <p id=\"inner-text\">{this.props.hit.key}</p>\r\n                </div>\r\n            );\r\n        }        \r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, null )(DrumPad)","// import react-redux dependancies\r\nimport React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\n// import child components for presentation\r\nimport DrumPad from \"./DrumPad\";\r\n\r\n// import css style rules\r\nimport '../App.scss';\r\n\r\n// dynamically create array of 9 drum pads\r\nclass DrumPadRow extends React.Component {\r\n    constructor( props ) {\r\n        super( props );\r\n\r\n        // bind this to function\r\n        this.clickHandler = this.clickHandler.bind( this );        \r\n    }\r\n    \r\n    // onClick listener handles when user clicks drum pad\r\n    clickHandler( value ) {\r\n        this.props.onClickHandler( value );\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div id=\"drum-pad-row\"> {/* container div to wrap child component */}\r\n            {/* <div id=\"drum-pad-row\" className=\"row\">  container div to wrap child component */}\r\n                {this.props.myDrums.map( ( hit ) => {\r\n                    return <DrumPad key={hit.key} hit={hit} onClickHandler={this.clickHandler} />;\r\n                } ) }\r\n            </div>                \r\n        );        \r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, null )(DrumPadRow)","// import react-redux dependancies\r\nimport React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\n// import action creators for mapDispatchToProps\r\nimport { playDrumSound, toggleActive } from '../redux/actions';\r\n\r\n// import child components for presentation\r\nimport DrumPadRow from \"./DrumPadRow\";\r\n\r\n// import css style rules\r\nimport '../App.scss';\r\n// import { $CombinedState } from \"redux\";\r\n\r\n// dynamically create array of 9 drum pads\r\nclass DrumPadArray extends React.Component {\r\n    constructor( props ) {\r\n        super( props );\r\n\r\n        // bind this to function\r\n        this.playDrumPad = this.playDrumPad.bind( this );  // plays the corresponding drum sound on click or keypress        \r\n        this.keyPressHandler = this.keyPressHandler.bind( this );  // keypress handler for keyboard input\r\n    }\r\n    \r\n    // handle click and keypress on drumpads\r\n    playDrumPad( key ) {\r\n        // get drum pads by reference for binding        \r\n        const qPad = document.getElementById( this.props.drums[0].key );\r\n        const wPad = document.getElementById( this.props.drums[1].key );\r\n        const ePad = document.getElementById( this.props.drums[2].key );\r\n        const aPad = document.getElementById( this.props.drums[3].key );\r\n        const sPad = document.getElementById( this.props.drums[4].key );\r\n        const dPad = document.getElementById( this.props.drums[5].key );\r\n        const zPad = document.getElementById( this.props.drums[6].key );\r\n        const xPad = document.getElementById( this.props.drums[7].key );\r\n        const cPad = document.getElementById( this.props.drums[8].key );\r\n\r\n        // only play if powered on\r\n        if ( this.props.power ) {\r\n            switch( key ) {\r\n                case this.props.drums[0].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[0].display );\r\n                    qPad.load();\r\n                    qPad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n\r\n                case this.props.drums[1].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[1].display );\r\n                    wPad.load();\r\n                    wPad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n\r\n                case this.props.drums[2].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[2].display );\r\n                    ePad.load();\r\n                    ePad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n                \r\n                case this.props.drums[3].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[3].display );\r\n                    aPad.load();\r\n                    aPad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n                \r\n                case this.props.drums[4].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[4].display );\r\n                    sPad.load();\r\n                    sPad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n                \r\n                case this.props.drums[5].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[5].display );\r\n                    dPad.load();\r\n                    dPad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n                \r\n                case this.props.drums[6].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[6].display );\r\n                    zPad.load();\r\n                    zPad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n                \r\n                case this.props.drums[7].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[7].display );\r\n                    xPad.load();\r\n                    xPad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n                \r\n                case this.props.drums[8].key:\r\n                    this.props.toggleActive( this.props.active, key );\r\n                    this.props.playDrumSound( this.props.drums[8].display );\r\n                    cPad.load();\r\n                    cPad.play();\r\n                    setTimeout( () => {\r\n                        this.props.toggleActive( this.props.active, key );\r\n                    }, 100 );\r\n                break;\r\n                \r\n                default:\r\n                break;\r\n            }\r\n        }\r\n    }    \r\n\r\n    // onKeyPress listener handles when user wants to play sound with keyboard\r\n    keyPressHandler( event ) {\r\n        this.playDrumPad( event.key );\r\n    } \r\n\r\n    componentDidMount() {\r\n        document.addEventListener( \"keydown\", this.keyPressHandler );\r\n    }\r\n\r\n    render() { \r\n        let splitDrums = [ this.props.drums.slice( 0, 3 ), this.props.drums.slice( 3, 6 ), this.props.drums.slice( 6, 9 ) ];\r\n        return (\r\n            <div id=\"drum-pad-array\"> {/* container div to wrap child component */}\r\n            {/* <div id=\"drum-pad-array\" className=\"container-md\">  container div to wrap child component */}\r\n                {splitDrums.map( ( someDrums, index ) => {\r\n                    return <DrumPadRow key={index} myDrums={someDrums} onClickHandler={this.playDrumPad} />;\r\n                } ) }\r\n            </div>                \r\n        );        \r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// connect dispatch to appropriate listener\r\nconst mapDispatchToProps = dispatch => {\r\n    return {        \r\n        playDrumSound: ( text ) => dispatch( playDrumSound( text ) ),\r\n        toggleActive: ( activeButton, value ) => dispatch( toggleActive( activeButton, value ) )\r\n    }\r\n}\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, mapDispatchToProps )(DrumPadArray)","// import react-redux dependancies\r\nimport React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\n// import action type constants\r\n// import { EDITOR_VIEW, PREVIEWER_VIEW } from \"../redux/actionTypes.js\";\r\n\r\n// import child components for presentation\r\nimport Display from \"./Display\";\r\nimport Banks from \"./Banks\";\r\nimport PowerSwitch from \"./PowerSwitch\";\r\nimport Volume from \"./Volume\";\r\nimport DrumPadArray from \"./DrumPadArray\";\r\n\r\n// import css style rules\r\nimport '../App.scss';\r\n\r\n// app's presentational component\r\nclass DrumMachine extends React.Component {\r\n    render() {        \r\n        return (\r\n            <div id=\"drum-machine\"> {/* container div to wrap child component */}\r\n            {/* <div id=\"drum-machine\" className=\"container-lg\"> {/* container div to wrap child component */}\r\n                <div id=\"dm-row\">\r\n                  {/*  <div id=\"flex-center\">\r\n                        <div id=\"viewport-size\"> */}\r\n                    <div id=\"dm-left-side\">\r\n                        <DrumPadArray /> {/* render array of drumpads to the output */}\r\n                    </div>\r\n                    <div id=\"dm-right-side\">\r\n                        <PowerSwitch />\r\n                        <Display /> {/* render the display component to the output */}\r\n                        <Volume />\r\n                        <Banks />\r\n                    </div>\r\n                  {/*  </div>\r\n                    </div> */}\r\n                </div>                \r\n            </div>                \r\n        );        \r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, null )(DrumMachine)\r\n/*\r\n// import react dependency\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// import action creators for mapDispatchToProps\r\nimport { playDrumSound } from '../redux/actions';\r\n\r\n// import action types for conditional rendering\r\n// import { PREVIEWER_VIEW } from '../redux/actionTypes';\r\n\r\n// import css style rules\r\nimport '../App.css';\r\n\r\n// app's presentational component\r\nclass DrumPad extends React.Component {\r\n    constructor( props ) {\r\n        super( props );\r\n\r\n        // bind this to function     \r\n        this.clickHandler = this.clickHandler.bind( this );\r\n        this.keyPressHandler = this.keyPressHandler.bind( this );\r\n    }\r\n    \r\n    // onClick listener handles when user clicks drum pad\r\n    clickHandler() {\r\n        const mediaElement = document.getElementById(\"x\");\r\n        this.props.playDrumSound();\r\n        mediaElement.load();\r\n        mediaElement.play();\r\n    }\r\n\r\n    // onKeyPress listener handles when user wants to play sound with keyboard\r\n    keyPressHandler( event ) {        \r\n        console.log( event.key );\r\n        if ( event.key === 'x' ) {\r\n            const mediaElement = document.getElementById(\"x\");\r\n            this.props.playDrumSound();\r\n            mediaElement.load();\r\n            mediaElement.play();\r\n        }        \r\n    } \r\n\r\n    componentDidMount() {\r\n        document.addEventListener( \"keydown\", this.keyPressHandler );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"drum-pad btn btn-primary rounded-0\" onClick={this.clickHandler}>\r\n                <audio className=\"clip\" src={process.env.PUBLIC_URL + \"/sounds/Bass-Drum-Hit.mp3\"} type=\"audio/mpeg\" id=\"x\">\r\n                    Your browser does not support the <code>audio</code> element.\r\n                </audio>\r\n                <p id=\"inner-text\">x</p>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// connect dispatch to appropriate listener\r\nconst mapDispatchToProps = dispatch => {\r\n    return {        \r\n        playDrumSound: () => dispatch( playDrumSound() )        \r\n    }\r\n}\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, mapDispatchToProps )(DrumPad) */","// import react dependency\nimport React from 'react';\n\n// import presentational component\nimport DrumMachine from \"./components/DrumMachine.js\";\n\n// import css style rules\nimport './App.scss';\n\n// app's main parent app w/o wrapper basically a container\nexport default function DMApp() {\n\n  return (\n\n    <div className=\"DMApp\">\n\n      <h1 id=\"app-title\">A Simple React Drum Machine</h1>\n\n      <DrumMachine />\n\n    </div>\n\n  );\n\n}","// export initial drum setup state const for first load\r\nexport const initialDrums = [\r\n    [\r\n        {\r\n            key: 'q',\r\n            name: 'Crash-Cymbal-Hit0',\r\n            display: \"Crash Cymbal\"\r\n        },\r\n        {\r\n            key: 'w',\r\n            name: 'Ride-Cymbal-Hit0',\r\n            display: \"Ride Cymbal\"\r\n        },\r\n        {\r\n            key: 'e',\r\n            name: 'Splash-Cymbal-Hit0',\r\n            display: \"Splash Cymbal\"\r\n        },\r\n        {\r\n            key: 'a',\r\n            name: 'Small-Tom-Drum-Hit0',\r\n            display: \"Small Tom\"\r\n        },\r\n        {\r\n            key: 's',\r\n            name: 'Medium-Tom-Drum-Hit0',\r\n            display: \"Medium Tom\"\r\n        },\r\n        {\r\n            key: 'd',\r\n            name: 'Floor-Tom-Drum-Hit0',\r\n            display: \"Floor Tom\"\r\n        },\r\n        {\r\n            key: 'z',\r\n            name: 'Hi-Hat-Hit0',\r\n            display: \"High Hat Closed\"\r\n        },\r\n        {\r\n            key: 'x',\r\n            name: 'Bass-Drum-Hit0',\r\n            display: \"Bass Drum\"\r\n        },\r\n        {\r\n            key: 'c',\r\n            name: 'Snare-Drum-Hit0',\r\n            display: \"Snare Drum\"\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            key: 'q',\r\n            name: 'Crash-Cymbal-Hit1',\r\n            display: \"Crash Cymbal\"\r\n        },\r\n        {\r\n            key: 'w',\r\n            name: 'Ride-Cymbal-Hit1',\r\n            display: \"Ride Cymbal\"\r\n        },\r\n        {\r\n            key: 'e',\r\n            name: 'Splash-Cymbal-Hit1',\r\n            display: \"Splash Cymbal\"\r\n        },\r\n        {\r\n            key: 'a',\r\n            name: 'Small-Tom-Drum-Hit1',\r\n            display: \"Small Tom\"\r\n        },\r\n        {\r\n            key: 's',\r\n            name: 'Medium-Tom-Drum-Hit1',\r\n            display: \"Medium Tom\"\r\n        },\r\n        {\r\n            key: 'd',\r\n            name: 'Floor-Tom-Drum-Hit1',\r\n            display: \"Floor Tom\"\r\n        },\r\n        {\r\n            key: 'z',\r\n            name: 'Hi-Hat-Hit1',\r\n            display: \"High Hat Open\"\r\n        },\r\n        {\r\n            key: 'x',\r\n            name: 'Bass-Drum-Hit1',\r\n            display: \"Bass Drum\"\r\n        },\r\n        {\r\n            key: 'c',\r\n            name: 'Snare-Drum-Hit1',\r\n            display: \"Snare Drum\"\r\n        }\r\n    ]\r\n];","// import action creators\r\nimport { DRUM_HIT, ADJUST_VOLUME, TOGGLE_BANK, TOGGLE_POWER, TOGGLE_ACTIVE } from \"../actionTypes.js\";\r\n\r\n// import initial state for drums on first load\r\nimport { initialDrums } from './initialDrums.js';\r\n\r\n// constant for initial state\r\nconst initialState = {\r\n    power: true,\r\n    display: \"\",\r\n    volume: 1,\r\n    banks: 0,\r\n    active: null,\r\n    drums: initialDrums[0]   \r\n};\r\n\r\n// drum machine component reducer \r\nexport default ( state = initialState, action ) => {\r\n    switch ( action.type ) {\r\n        // user toggled power switch\r\n        case TOGGLE_POWER: {\r\n            return ({\r\n                power: action.power,\r\n                display: \"\",\r\n                volume: state.volume,\r\n                banks: state.banks,\r\n                active: state.active,\r\n                drums: state.drums\r\n            })\r\n        }\r\n        // update user input aka drum hit to state\r\n        case DRUM_HIT: {\r\n            return ({\r\n                power: state.power,\r\n                display: action.name,\r\n                volume: state.volume,\r\n                banks: state.banks,\r\n                active: state.active,\r\n                drums: state.drums\r\n            });\r\n        }\r\n\r\n        // update the volume set by the user\r\n        case ADJUST_VOLUME: {\r\n            return ({\r\n                power: state.power,\r\n                display: state.display,\r\n                volume: action.volume,\r\n                banks: state.banks,\r\n                active: state.active,\r\n                drums: state.drums\r\n            });\r\n        }\r\n\r\n        // update the drum kit set by the user\r\n        case TOGGLE_BANK: {\r\n            return ({\r\n                power: state.power,\r\n                display: state.display,\r\n                volume: state.volume,\r\n                banks: action.banks,\r\n                active: state.active,\r\n                drums: initialDrums[action.banks]\r\n            });\r\n        }\r\n\r\n        // update active button for button animations\r\n        case TOGGLE_ACTIVE: {\r\n            return ({\r\n                power: state.power,\r\n                display: state.display,\r\n                volume: state.volume,\r\n                banks: state.banks,\r\n                active: action.active,\r\n                drums: state.drums\r\n            });\r\n        }\r\n\r\n        // default no action return current state\r\n        default:\r\n            return state;\r\n    }\r\n}","// import react dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import css style sheet\nimport './index.css';\n\n// import app wrapper\nimport DMApp from './DMApp';\n\n// default service worker\n// import * as serviceWorker from './serviceWorker';\n\n// import redux dependencies\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\n// import reducer functions\nimport dmReducer from './redux/reducers/dmReducer.js';\n\n// create store to hold app's state\nconst store = createStore( dmReducer );\n\n// render app wrapper with store connects redux\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <DMApp />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}